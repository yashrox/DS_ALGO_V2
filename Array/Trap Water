class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        vector<int> leftSide;
        vector<int> rightSide(n);
        int maxLeft = height[0];
        int maxRight = height[n-1];
        leftSide.push_back(maxLeft);
        rightSide.push_back(maxRight);
        for (int i=1; i<n; i++) {
            maxLeft = max(maxLeft, height[i]);
            leftSide.push_back(maxLeft);
        }
        for (int i=n-2; i>=0; i--) {
            maxRight = max(maxRight, height[i]);
            rightSide[i] = maxRight;
        }
        int count = 0;
        for (int i=1; i<n-1; i++) {
            count += min(leftSide[i], rightSide[i]) - height[i];
        }
        return count;
    }
};
