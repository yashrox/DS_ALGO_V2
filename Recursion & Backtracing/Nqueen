https://leetcode.com/problems/n-queens-ii/?envType=study-plan-v2&envId=top-interview-150

class Solution {
public:
    bool isSafe(int i, int j, int n, vector<vector<int>>& result) {
        int k = i;
        int l = j;
        // Upwards
        while(k>=0) {
            if (result[k][l] == 1) {
                return false;
            }
            k--;
        }
        // left diagonal
        k = i;
        while(k>=0 && l>=0) {
            if (result[k][l] == 1) {
                return false;
            }
            k--;
            l--;
        }
        // right diagonal
        k = i;
        l = j;
        while(k>=0 && l<n) {
            if (result[k][l] == 1) {
                return false;
            }
            k--;
            l++;
        }

        return true;
    }

    int nqueen(int n, int i, vector<vector<int>>& result) {
        if (i >= n) {
            return 1;
        }
        int total = 0;
        for (int j=0; j<n; j++) {
            // Is Safe
            if (isSafe(i,j,n,result)) {
                result[i][j] = 1;
               total += nqueen(n, i+1, result);
            }
            result[i][j] = 0;
        }
        return total;
    }

    int totalNQueens(int n) {
        vector<vector<int>> result(n, vector<int>(n,0));
        return nqueen(n, 0, result);
    }
};
